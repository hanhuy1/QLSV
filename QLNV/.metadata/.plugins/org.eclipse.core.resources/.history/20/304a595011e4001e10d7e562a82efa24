package QLSV;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public class ListNV {
	static ArrayList<NhanVien> listNV=new ArrayList<>();
	public void inputs () {
		Scanner sc = new Scanner(System.in);
		String choice="yes";
		do {
			NhanVien nv = new NhanVien();
			nv.input();
			listNV.add(nv);
			System.out.println("Bạn muốn tiếp tục? (yes/no)");
			choice = sc.next();
		}while(choice.equalsIgnoreCase("yes"));
	}
	public void  outputs (){
		for(NhanVien nhanVien: listNV) {
			nhanVien.output();
		}
		
	}
		
	public int FindbyID(String MaNV) {
		for (int i = 0; i < listNV.size(); i++) {
			NhanVien nv=listNV.get(i);
			if (nv.getMaNv().equalsIgnoreCase(MaNV)) {
				System.out.println("Đã tìm thấy tại vị trí: "+i);
				nv.output();
				return i;
			}
			
		}
		return -1;
	}
	
	public void delById(String MaNV) {
		int position = FindbyID(MaNV);
		if(position < 0) {
			System.out.println("Không tìm thấy nhân viên để xoá");
		}else {
			listNV.remove(position);
			System.out.print("Đã xoá nhân viên tại vị trí: "+position);
		}
		
	}
	public void Data() {
		listNV.add(new NhanVien("01", "a1", 1000));
		listNV.add(new NhanVien("02", "a2", 11000));
		listNV.add(new NhanVien("03", "a3", 12000));
		listNV.add(new NhanVien("04", "a4", 10300));
		listNV.add(new NhanVien("05", "a5", 10040));
		listNV.add(new NhanVien("06", "a6", 10005));
		listNV.add(new NhanVien("07", "a7", 100056));
		listNV.add(new NhanVien("08", "a8", 100066));
		listNV.add(new NhanVien("09", "a9", 100077));
		listNV.add(new NhanVien("10", "a10", 1007770));
		listNV.add(new NhanVien("11", "a11", 100077));
		
	}
	
	public void update(String MaNV) {
		int pos = FindbyID(MaNV);
		if (pos < 0) {
			System.out.println("Không tìm thấy nhân viên: "+MaNV);
			
		}else {
			NhanVien nvNew=new NhanVien();
			nvNew.input();
			listNV.set(pos, nvNew);
			System.out.println("Cập nhật thành công!");
		}
	}
	
	public void FindSalary(double min, double max) {
		for (NhanVien nv : listNV) {
			if (nv.getluong() > min && nv.getluong() < max) {
				nv.output();
			}
		}
	}
	
}
